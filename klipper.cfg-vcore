# v-core pro SKR Pro 1.2
# date: 7.11.20
# Klipper 0.9.1
# no calibration for input_shaper yet

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: PE9
dir_pin: PF1
enable_pin: !PF2
step_distance: 0.0125
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -5
position_endstop: -1
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 300
homing_speed: 50
homing_retract_dist: 0

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: PE11
dir_pin: PE8
enable_pin: !PD7
step_distance: 0.0125
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: -1
position_min: -1
position_max: 295
homing_speed: 50
homing_retract_dist: 0

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: PE13
dir_pin: !PC2
enable_pin: !PC0
step_distance: 0.0025
endstop_pin: probe:z_virtual_endstop
#endstop_pin: ^ar38
#position_endstop: 0.5
position_min: -10 # The Z carriage may need to travel below the Z=0
                 # homing point if the bed has a significant tilt.
position_max: 280
homing_speed: 10

[stepper_z1]
step_pin: PD15
dir_pin: !PE7
enable_pin: !PA3
step_distance: 0.0025

[stepper_z2]
step_pin: PD13
dir_pin: !PG9
enable_pin: !PF0
step_distance: 0.0025

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: PE14
dir_pin: !PA0
enable_pin: !PC3
step_distance: 0.0012
nozzle_diameter: 0.4
filament_diameter: 1.750
max_extrude_cross_section: 0.64
max_extrude_only_distance: 500
max_extrude_only_velocity:2000
#max_extrude_only_accel:350

# The remaining variables describe the extruder heater.
heater_pin: PB1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF4
min_extrude_temp: 170
min_temp: 0
max_temp: 270

control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114

pressure_advance: 0.09
pressure_advance_smooth_time: 0.040


[heater_bed]
heater_pin: PD12
sensor_pin: PF3
sensor_type: NTC 100K beta 3950
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114

min_temp: 0
max_temp: 120

# Print cooling fan (omit section if fan not present).
[fan]
pin: PC8
#pin: PC8

[heater_fan nozzle_cooling_fan]
pin: PE5
#max_power: 0.2

# Micro-controller information.
[mcu]
#serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_500043000A5052504B313720-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 250000
#   The baud rate to use. The default is 250000.

# The printer section controls high level printer settings.
[printer]
kinematics: corexy
max_velocity: 300
max_accel: 2000
max_accel_to_decel: 1000
max_z_velocity: 10
max_z_accel: 30
square_corner_velocity: 5
#buffer_time_high: 2

[input_shaper]
shaper_freq_x: 48.3
shaper_freq_y: 46.6
shaper_type: mzv

######################################################################
# Bed probing hardware
######################################################################

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.
#[probe]
#pin: PG8
#x_offset: -11.71
#speed: 2
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
#samples: 5
#   The number of times to probe each point. The probed z-values will
#   be averaged. The default is to probe 1 time.
#sample_retract_dist: 5
#   The distance (in mm) to lift the toolhead between each sample (if
#   sampling more than once). The default is 2mm.
#lift_speed: 5.0
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples. The default is to use the same value as the 'speed'
#   parameter.
#samples_result: median
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
#samples_tolerance: 0.100
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. If this tolerance is exceeded then either an error is
#   reported or the attempt is restarted (see
#   samples_tolerance_retries). The default is 0.100mm.
#samples_tolerance_retries: 10
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. On a retry, all current samples are discarded
#   and the probe attempt is restarted. If a valid set of samples are
#   not obtained in the given number of retries then an error is
#   reported. The default is zero which causes an error to be reported
#   on the first sample that exceeds samples_tolerance.
#activate_gcode:
#   A list of G-Code commands to execute prior to each probe attempt.
#   See docs/Command_Templates.md for G-Code format. This may be
#   useful if the probe needs to be activated in some way. Do not
#   issue any commands here that move the toolhead (eg, G1). The
#   default is to not run any special G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands to execute after each probe attempt
#   completes. See docs/Command_Templates.md for G-Code format. Do not
#   issue any commands here that move the toolhead. The default is to
#   not run any special G-Code commands on deactivation.

# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.


[bltouch]
sensor_pin: ^PA2
control_pin: PA1
pin_move_time: 0.675
pin_up_reports_not_triggered: True
pin_up_touch_mode_reports_triggered: True
x_offset: -31
y_offset: -11
z_offset: 3.98
speed: 7
#   See the "probe" section for information on these parameters.

# Mesh Bed Leveling. One may define a [bed_mesh] config section
# to enable move transformations that offset the z axis based
# on a mesh generated from probed points. Note that bed_mesh
# and bed_tilt are incompatible, both cannot be defined.  When
# using a probe to home the z-axis, it is recommended to define
# a [homing_override] section in printer.cfg to home toward the
# center of the print area.
#

[bed_mesh]
speed: 100
#   The speed (in mm/s) of non-probing moves during the
#   calibration. The default is 50.
horizontal_move_z: 10
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
mesh_min: 20,20
#   Defines the minimum x,y coodinate of the mesh for rectangular beds.  This
#   coordinate is relative to the probe's location. This will be the first
#   point probed, nearest to the origin. This parameter must be provided for
#   rectangular beds.
mesh_max:265,260
#   Defines the maximum x,y coordinate of the mesh for rectangular beds.
#   Adheres to the same principle as mesh_min, however this will be the
#   furthest point probed from the bed's origin. This parameter must be
#   provided for rectangular beds.
probe_count: 7,7
#   For rectangular beds, this is a comma separate pair of integer
#   values (X,Y) defining the number of points to probe along each axis.
#   A single value is also valid, in which case that value will be applied
#   to both axes.  Default is 3,3.
fade_start: 1.0
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled.  Default is 1.0.
fade_end: 10.0
#   The gcode z position in which phasing out completes.  When set
#   to a value below fade_start, fade is disabled. It should be
#   noted that fade may add unwanted scaling along the z-axis of a
#   print.  If a user wishes to enable fade, a value of 10.0 is
#   recommended. Default is 0.0, which disables fade.
#fade_target:
#   The z position in which fade should converge. When this value is set
#   to a non-zero value it must be within the range of z-values in the mesh.
#   Users that wish to converge to the z homing position should set this to 0.
#   Default is the average z value of the mesh.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will
#   trigger a split. Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point. The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
algorithm: bicubic
#   The interpolation algorithm to use. May be either "lagrange"
#   or "bicubic". This option will not affect 3x3 grids, which
#   are forced to use lagrange sampling.  Default is lagrange.
bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.
#relative_reference_index:
#   A point index in the mesh to reference all z values to. Enabling
#   this parameter produces a mesh relative to the probed z position
#   at the provided index.



# Multiple Z stepper tilt adjustment. This feature enables independent
# adjustment of multiple z steppers (see stepper_z1 section below) to
# adjust for tilt. If this section is present then a Z_TILT_ADJUST
# extended G-Code command becomes available.
[z_tilt]
z_positions:
	-40,100
	150,330
	340,100
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the XY position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z, the second to stepper_z1,
#   the third to stepper_z2, etc. This parameter must be provided.
points:
	70,60
	185,280
	270,60
		
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates. This parameter must be
#   provided.
speed: 150
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 10
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
retries: 10
#   Number of times to retry if the probed points aren't within tolerance
retry_tolerance: 0.02
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance. Note the smallest unit of
#   change here would be a single step. However if you are probing
#   more points than steppers then you will likely have a fixed
#   minimum value for the range of probed points which you can learn
#   by observing command output.



# Heater and temperature sensor verification. Heater verification is
# automatically enabled for each heater that is configured on the
# printer. Use verify_heater sections to change the default settings.
#[verify_heater heater_config_name]
#max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
#check_gain_time:
#   This controls heater verification during initial heating.  Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


# Idle timeout. An idle timeout is automatically enabled - add an
# explicit idle_timeout config section to change the default settings.
#[idle_timeout]
#gcode:
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute on an idle timeout. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
#timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


# Multi-stepper axes. On a cartesian style printer, the stepper
# controlling a given axis may have additional config blocks defining
# steppers that should be stepped in concert with the primary
# stepper. One may define any number of sections with a numeric suffix
# starting at 1 (for example, "stepper_z1", "stepper_z2", etc.).
#   See the example.cfg for the definition of the above parameters.
#endstop_pin: ^ar19
#   If an endstop_pin is defined for the additional stepper then the
#   stepper will home until the endstop is triggered. Otherwise, the
#   stepper will home until the endstop on the primary stepper for the
#   axis is triggered.


# Stepper phase adjusted endstops. To use this feature, define a
# config section with an "endstop_phase" prefix followed by the name
# of the corresponding stepper config section (for example,
# "[endstop_phase stepper_z]"). This feature can improve the accuracy
# of endstop switches. Add a bare "[endstop_phase]" declaration to
# enable the ENDSTOP_PHASE_CALIBRATE command.
#[endstop_phase stepper_x]
#phases:
#   This specifies the number of phases of the given stepper motor
#   driver (which is the number of micro-steps multiplied by four).
#   This setting is automatically determined if one uses TMC2130,
#   TMC2208, TMC2224 or TMC2660 drivers with run-time configuration.
#   Otherwise, this parameter must be provided.
#endstop_accuracy: 0.200
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). The default is
#   phases*step_distance.
#endstop_phase:
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. Only set this value if one is sure the
#   stepper motor driver is reset every time the mcu is reset. If this
#   is not set, then the stepper phase will be detected on the first
#   home and that phase will be used on all subsequent homes.
#endstop_align_zero: False
#   If true then the position_endstop of the axis will effectively be
#   modified so that the zero position for the axis occurs at a full
#   step on the stepper motor. (If used on the Z axis and the print
#   layer height is a multiple of a full step distance then every
#   layer will occur on a full step.) The default is False.


# Heater cooling fans (one may define any number of sections with a
# "heater_fan" prefix). A "heater fan" is a fan that will be enabled
# whenever its associated heater is active. By default, a heater_fan
# has a shutdown_speed equal to max_power.
#[heater_fan my_nozzle_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
#heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
#heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0


# Controller cooling fan (one may define any number of sections with a
# "controller_fan" prefix). A "controller fan" is a fan that will be
# enabled whenever its associated heater or any configured stepper
# driver is active. The fan will stop, whenever an idle_timeout is
# reached to ensure no overheating will occur after deactivating a
# watched component.
#[controller_fan my_controller_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
#idle_timeout:
#   The ammount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
#idle_speed:
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and before
#   the idle_timeout is reached. This must be greater or equal
#   max_power. The default is max_power
#heater:
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".


# Temperature-triggered cooling fans (one may define any number of
# sections with a "temperature_fan" prefix). A "temperature fan" is a
# fan that will be enabled whenever its associated sensor is above a
# set temperature. By default, a temperature_fan has a shutdown_speed
# equal to max_power.
#[temperature_fan my_temp_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: analog13
#   See the "heater" section for details about the sensor_type and
#   sensor_pin parameters.
#min_temp: 0
#max_temp: 100
#   The maximum range of valid temperatures (in Celsius) that the
#   sensor must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. Set this range just wide enough so
#   that reasonable temperatures do not result in an error. These
#   parameters must be provided.
#target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#control: watermark
#   Control algorithm (either watermark or pid). This parameter must
#   be provided.
#pid_Kp: 40
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID temperature fans.
#pid_Ki: 0.2
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID temperature fans.
#pid_Kd: 0.1
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID temperature fans.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which the derivative in the pid
#   will be smoothed to reduce the impact of measurement noise. The
#   default is 2 seconds.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.

# Support for gcode arc (G2/G3) commands.
[gcode_arcs]
resolution: 1.0

[tmc2209 stepper_x]
uart_pin: PC13
microsteps: 16
run_current: 1.2
hold_current: 0.500
stealthchop_threshold: 250
diag_pin: PB10
driver_SGTHRS: 40

[tmc2209 stepper_y]
uart_pin: PE3
microsteps: 16
run_current: 1.2
hold_current: 0.500
stealthchop_threshold: 250
diag_pin: PE12
driver_SGTHRS: 40

[tmc2209 stepper_z]
uart_pin: PE1
microsteps: 16
run_current: 0.650
hold_current: 0.450
stealthchop_threshold: 30

[tmc2209 extruder]
uart_pin: PD4
microsteps: 16
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 5

[tmc2209 stepper_z1]
uart_pin: PD1
microsteps: 16
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 30

[tmc2209 stepper_z2]
uart_pin: PD6
microsteps: 16
run_current: 0.800
hold_current: 0.500
stealthchop_threshold: 30



# Homing override. One may use this mechanism to run a series of
# g-code commands in place of a G28 found in the normal g-code input.
# This may be useful on printers that require a specific procedure to
# home the machine.
[homing_override]
set_position_z: 5
gcode:
	INIT_TMC Stepper=extruder
	INIT_TMC Stepper=stepper_x
	INIT_TMC Stepper=stepper_y
	INIT_TMC Stepper=stepper_z
	INIT_TMC Stepper=stepper_z1
	INIT_TMC Stepper=stepper_z2
	G90   ; Uncomment these 2 lines to blindly lift the Z 2mm at start
    G0 Z20 F500

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.5 HOLDCURRENT=0.6
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.5 HOLDCURRENT=0.6
    G28 X

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.4 HOLDCURRENT=0.4
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.4 HOLDCURRENT=0.4
    G28 Y
 
   SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.2 HOLDCURRENT=0.5
   SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.2 HOLDCURRENT=0.5
	G0 X151.21 Y118.99 F3000
	G28 Z
	G0 Z10 F500
    
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of G28 commands found in the normal
#   g-code input. If a G28 is contained in this list of commands then
#   it will invoke the normal homing procedure for the printer. The
#   commands listed here must home all axes. This parameter must be
#   provided.
#axes: xyz
#   The axes to override. For example, if this is set to "z" then the
#   override script will only be run when the z axis is homed (eg, via
#   a "G28" or "G28 Z0" command). Note, the override script should
#   still home all axes. The default is "xyz" which causes the
#   override script to be run in place of all G28 commands.
#set_position_x:
#set_position_y:
#set_position_z:
#   If specified, the printer will assume the axis is at the specified
#   position prior to running the above g-code commands. Setting this
#   disables homing checks for that axis. This may be useful if the
#   head must move prior to invoking the normal G28 mechanism for an
#   axis. The default is to not force a position for an axis.


# Support manually moving stepper motors for diagnostic purposes.
# Note, using this feature may place the printer in an invalid state -
# see docs/G-Codes.md for important details.
[force_move]
enable_force_move: true
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.


######################################################################
# Optional G-Code features
######################################################################


[gcode_macro G34]
gcode:
    # Home the extruder and bed
    G28
    # Trim the bed
    Z_Tilt_Adjust


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PG4, EXP1_3=PD11, EXP1_5=PG2, EXP1_7=PG6, EXP1_9=<GND>,
    EXP1_2=PA8, EXP1_4=PD10, EXP1_6=PG3, EXP1_8=PG7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB14, EXP2_3=PG10, EXP2_5=PF11, EXP2_7=PF12,  EXP2_9=<GND>,
    EXP2_2=PB13, EXP2_4=PB12, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=PF13
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi2"

######################################################################
# Display support
######################################################################

[display]
lcd_type: st7920
cs_pin: EXP1_4
sclk_pin: EXP1_5
sid_pin: EXP1_3
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8

[output_pin beeper]
pin: EXP1_1

# Support for a display attached to the micro-controller.
#[display]
#lcd_type:st7920
#   The type of LCD chip in use. This may be "hd44780" (which is used
#   in "RepRapDiscount 2004 Smart Controller" type displays), "st7920"
#   (which is used in "RepRapDiscount 12864 Full Graphic Smart
#   Controller" type displays), "uc1701" (which is used in "MKS Mini
#   12864" type displays), "ssd1306", or "sh1106". This parameter must
#   be provided.
#rs_pin: PD10
#e_pin: PD11
#d4_pin: PG2
#d5_pin: PG3
#d6_pin: PG6
#d7_pin:	PG7
#   The pins connected to an hd44780 type lcd. These parameters must
#   be provided when using an hd44780 display.
#cs_pin:
#sclk_pin:
#sid_pin:
#   The pins connected to an st7920 type lcd. These parameters must be
#   provided when using an st7920 display.
#cs_pin: PB12
#a0_pin: PD10
#rst_pin: RST
#   The pins connected to an uc1701 type lcd. The rst_pin is
#   optional. The cs_pin and a0_pin parameters must be provided when
#   using an uc1701 display.
#contrast: 40
#   The contrast to set when using a uc1701 type display.  The value may
#   range from 0 to 63.  Default is 40.
#cs_pin:
#dc_pin:
#spi_bus:
#spi_speed:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   The pins connected to an ssd1306 type lcd when in "4-wire" spi
#   mode. The parameters that start with "spi_" are optional and they
#   control the spi settings used to communicate with the chip. The
#   default is to use i2c mode for ssd1306 displays.
#reset_pin:
#   A reset pin may be specified on ssd1306 displays. If it is not
#   specified then the hardware must have a pull-up on the
#   corresponding lcd line.
#display_group:
#   The name of the display_data group to show on the display. This
#   controls the content of the screen (see the description of
#   [display_data] below for more information). The default is
#   _default_20x4 for hd44780 displays and _default_16x4 for other
#   displays.
#menu_root:
#   Entry point for menu, root menu container name. If this parameter
#   is not provided then default menu root is used. When provided
#   menu entry is 'deck' type then it'll be initiated immediately at startup.
#   Description of menu items is located in example-menu.cfg file.
#menu_timeout:
#   Timeout for menu. Being inactive this amount of seconds will trigger
#   menu exit or return to root menu when having autorun enabled.
#   The default is 0 seconds (disabled)
#encoder_pins: ^PF11, ^PG10
#   The pins connected to encoder. 2 pins must be provided when
#   using encoder. This parameter must be provided when using menu.
#click_pin: ^!PA8
#   The pin connected to 'enter' button or encoder 'click'. This parameter
#   must be provided when using menu. The presence of an 'analog_range_click_pin'
#   config parameter turns this parameter from digital to analog.
#back_pin:
#   The pin connected to 'back' button. This parameter is optional, menu
#   can be used without it. The presence of an 'analog_range_back_pin'
#   config parameter turns this parameter from digital to analog.
#up_pin:
#   The pin connected to 'up' button. This parameter must be provided
#   when using menu without encoder. The presence of an 'analog_range_up_pin'
#   config parameter turns this parameter from digital to analog.
#down_pin:
#   The pin connected to 'down' button. This parameter must be provided
#   when using menu without encoder. The presence of an 'analog_range_down_pin'
#   config parameter turns this parameter from digital to analog.
#kill_pin:
#   The pin connected to 'kill' button. This button will call emergency stop.
#   The presence of an 'analog_range_kill_pin' config parameter turns this
#   parameter from digital to analog.
#analog_pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the analog button.
#   The default is 4700 ohms.
#analog_range_click_pin:
#   The resistance range for a 'enter' button. Range minimum and maximum
#   comma-separated values must be provided when using analog button.
#analog_range_back_pin:
#   The resistance range for a 'back' button. Range minimum and maximum
#   comma-separated values must be provided when using analog button.
#analog_range_up_pin:
#   The resistance range for a 'up' button. Range minimum and maximum
#   comma-separated values must be provided when using analog button.
#analog_range_down_pin:
#   The resistance range for a 'down' button. Range minimum and maximum
#   comma-separated values must be provided when using analog button.
#analog_range_kill_pin:
#   The resistance range for a 'kill' button. Range minimum and maximum
#   comma-separated values must be provided when using analog button.

# Support for displaying custom data on an lcd screen. One may create
# any number of display groups and any number of data items under
# those groups. The display will show all the data items for a given
# group if the display_group option in the [display] section is set to
# the given group name.
#[display_data my_group_name my_data_name]
#position: 0, 0
#   Comma separated row and column of the display position that should
#   be used to display the information. This parameter must be
#   provided.
#text:
#   The text to show at the given position. This field is evaluated
#   using command templates (see docs/Command_Templates.md). This
#   parameter must be provided.

# Display data text "macros" (one may define any number of sections
# with a display_template prefix). This feature allows one to reduce
# repetitive definitions in display_data sections. One may use the
# builtin render() function in display_data sections to evaluate a
# template. For example, if one were to define [display_template
# my_template] then one could use "{ render('my_template') }" in a
# display_data section.
#[display_template my_template_name]
#param_<name>:
#   One may specify any number of options with a "param_" prefix. The
#   given name will be assigned the given value (parsed as a Python
#   literal) and will be available during macro expansion. If the
#   parameter is passed in the call to render() then that value will
#   be used during macro expansion. For example, a config with
#   "param_speed = 75" might have a caller with
#   "render('my_template_name', param_speed=80)". Parameter names may
#   not use upper case characters.
#text:
#   The text to return when the render() function is called for this
#   template. This field is evaluated using command templates (see
#   docs/Command_Templates.md). This parameter must be provided.

# If a primary [display] section has been defined in printer.cfg as shown
# above it is possible to define multiple auxilary displays.  Note that
# auxilary displays do not currently support menu functionality, thus they
# do not support the "menu" options or button configuration.
#[display my_display]
#lcd_type:
#rs_pin:
#e_pin:
#d4_pin:
#d5_pin:
#d6_pin:
#d7_pin:
#cs_pin:
#sclk_pin:
#sid_pin:
#cs_pin:
#a0_pin:
#rst_pin:
#contrast: 40
#cs_pin:
#dc_pin:
#spi_bus:
#spi_speed:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#reset_pin:
#display_group:
#   See the [display] section above for details on each configuration
#   option above.



# G-Code macros (one may define any number of sections with a
# "gcode_macro" prefix).
#[gcode_macro my_cmd]
#gcode:
#   A list of G-Code commands (one per line; subsequent lines
#   indented) to execute in place of "my_cmd". This parameter is
#   evaluated using Python "string format syntax" with the command
#   parameters as named arguments. For example, if one were to define
#   a macro MY_DELAY with gcode "G4 P{DELAY}" then the command
#   "MY_DELAY DELAY=100" would evaluate to "G4 P100". This parameter
#   must be provided.
#default_parameter_<parameter>:
#   One may define any number of options with a "default_parameter_"
#   prefix. Use this to define default values for g-code parameters.
#   For example, if one were to define the macro MY_DELAY with gcode
#   "G4 P{DELAY}" along with "default_parameter_DELAY = 50" then the
#   command "MY_DELAY" would evaluate to "G4 P50". The default is to
#   require that all parameters used in the gcode script be present in
#   the command invoking the macro.


# Enable the "M118" and "RESPOND" extended commands.
# [respond]
# default_type: echo
#    Sets the default prefix of the "M118" and "RESPOND" output to one of
#    the following:
#        echo: "echo: " (This is the default)
#        command: "// "
#        error: "!! "
# default_prefix: echo:
#    Directly sets the default prefix. If present, this value will override
#    the "default_type".



# Pause/Resume functionality with support of position capture and restore
#[pause_resume]
#recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s).  Default is 50.0 mm/s.


# Filament Switch Sensor.  Support for filament insert and runout detection
# using a switch sensor, such as an endstop switch.
#[filament_switch_sensor my_sensor]
#pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   The gcode to run after a filament runout is detected. If
#   pause_on_runout is set to True this gcode will run after the PAUSE
#   is complete. The default is not to run any gcode commands.
#insert_gcode:
#   The gcode to run after a filament insert is detected. The default
#   is not to run any gcode commands, which disables insert detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#switch_pin:
#   The pin on which the switch is connected. This parameter must be
#   provided.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.115000, -0.097500, -0.167500, -0.165000, -0.132500, -0.040000, 0.100000
#*# 	  0.232500, 0.032500, -0.042500, -0.070000, -0.040000, 0.042500, 0.190000
#*# 	  0.247500, 0.062500, 0.015000, 0.010000, 0.035000, 0.105000, 0.255000
#*# 	  0.290000, 0.147500, 0.082500, 0.055000, 0.070000, 0.147500, 0.295000
#*# 	  0.267500, 0.157500, 0.102500, 0.115000, 0.125000, 0.195000, 0.350000
#*# 	  0.347500, 0.242500, 0.160000, 0.107500, 0.115000, 0.180000, 0.305000
#*# 	  0.365000, 0.252500, 0.170000, 0.707500, 0.122500, 0.210000, 0.330000
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 7
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 264.98
#*#
#*# [bed_mesh 65]
#*# version = 1
#*# points =
#*# 	0.022903, -0.197097, -0.279597, -0.279597, -0.244597, -0.124597, 0.050403
#*# 	0.145403, -0.054597, -0.159597, -0.179597, -0.117097, -0.002097, 0.147903
#*# 	0.197903, -0.002097, -0.069597, -0.074597, -0.034597, 0.070403, 0.227903
#*# 	0.255403, 0.117903, 0.037903, 0.020403, 0.037903, 0.132903, 0.280403
#*# 	0.267903, 0.137903, 0.017903, 0.002903, 0.032903, 0.150403, 0.315403
#*# 	0.272903, 0.117903, 0.025403, 0.012903, 0.045403, 0.162903, 0.322903
#*# 	0.275403, 0.082903, 0.022903, -0.004597, 0.045403, 0.162903, 0.312903
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 7
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 264.98
#*#
#*# [bed_mesh 75]
#*# version = 1
#*# points =
#*# 	0.022903, -0.197097, -0.279597, -0.279597, -0.244597, -0.124597, 0.050403
#*# 	0.145403, -0.054597, -0.159597, -0.179597, -0.117097, -0.002097, 0.147903
#*# 	0.197903, -0.002097, -0.069597, -0.074597, -0.034597, 0.070403, 0.227903
#*# 	0.255403, 0.117903, 0.037903, 0.020403, 0.037903, 0.132903, 0.280403
#*# 	0.267903, 0.137903, 0.017903, 0.002903, 0.032903, 0.150403, 0.315403
#*# 	0.272903, 0.117903, 0.025403, 0.012903, 0.045403, 0.162903, 0.322903
#*# 	0.275403, 0.082903, 0.022903, -0.004597, 0.045403, 0.162903, 0.312903
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 7
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 264.98
#*#
#*# [bed_mesh 105]
#*# version = 1
#*# points =
#*# 	  0.115000, -0.097500, -0.167500, -0.165000, -0.132500, -0.040000, 0.100000
#*# 	  0.232500, 0.032500, -0.042500, -0.070000, -0.040000, 0.042500, 0.190000
#*# 	  0.247500, 0.062500, 0.015000, 0.010000, 0.035000, 0.105000, 0.255000
#*# 	  0.290000, 0.147500, 0.082500, 0.055000, 0.070000, 0.147500, 0.295000
#*# 	  0.267500, 0.157500, 0.102500, 0.115000, 0.125000, 0.195000, 0.350000
#*# 	  0.347500, 0.242500, 0.160000, 0.107500, 0.115000, 0.180000, 0.305000
#*# 	  0.365000, 0.252500, 0.170000, 0.707500, 0.122500, 0.210000, 0.330000
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 7
#*# max_y = 260.0
#*# mesh_x_pps = 2
#*# max_x = 264.98
